// generated by jsonenums -type=Declension; DO NOT EDIT

package declension

import (
	"encoding/json"
	"fmt"
)

var (
	_DeclensionNameToValue = map[string]Declension{
		"Strong": Strong,
		"Weak":   Weak,
	}

	_DeclensionValueToName = map[Declension]string{
		Strong: "Strong",
		Weak:   "Weak",
	}
)

func init() {
	var v Declension
	if _, ok := interface{}(v).(fmt.Stringer); ok {
		_DeclensionNameToValue = map[string]Declension{
			interface{}(Strong).(fmt.Stringer).String(): Strong,
			interface{}(Weak).(fmt.Stringer).String():   Weak,
		}
	}
}

// MarshalJSON is generated so Declension satisfies json.Marshaler.
func (r Declension) MarshalJSON() ([]byte, error) {
	if s, ok := interface{}(r).(fmt.Stringer); ok {
		return json.Marshal(s.String())
	}
	s, ok := _DeclensionValueToName[r]
	if !ok {
		return nil, fmt.Errorf("invalid Declension: %d", r)
	}
	return json.Marshal(s)
}

// UnmarshalJSON is generated so Declension satisfies json.Unmarshaler.
func (r *Declension) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return fmt.Errorf("Declension should be a string, got %s", data)
	}
	v, ok := _DeclensionNameToValue[s]
	if !ok {
		return fmt.Errorf("invalid Declension %q", s)
	}
	*r = v
	return nil
}
