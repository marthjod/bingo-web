// generated by jsonenums -type=Degree; DO NOT EDIT

package comparison

import (
	"encoding/json"
	"fmt"
)

var (
	_DegreeNameToValue = map[string]Degree{
		"Positive":    Positive,
		"Comparative": Comparative,
		"Superlative": Superlative,
		"Unknown":     Unknown,
	}

	_DegreeValueToName = map[Degree]string{
		Positive:    "Positive",
		Comparative: "Comparative",
		Superlative: "Superlative",
		Unknown:     "Unknown",
	}
)

func init() {
	var v Degree
	if _, ok := interface{}(v).(fmt.Stringer); ok {
		_DegreeNameToValue = map[string]Degree{
			interface{}(Positive).(fmt.Stringer).String():    Positive,
			interface{}(Comparative).(fmt.Stringer).String(): Comparative,
			interface{}(Superlative).(fmt.Stringer).String(): Superlative,
			interface{}(Unknown).(fmt.Stringer).String():     Unknown,
		}
	}
}

// MarshalJSON is generated so Degree satisfies json.Marshaler.
func (r Degree) MarshalJSON() ([]byte, error) {
	if s, ok := interface{}(r).(fmt.Stringer); ok {
		return json.Marshal(s.String())
	}
	s, ok := _DegreeValueToName[r]
	if !ok {
		return nil, fmt.Errorf("invalid Degree: %d", r)
	}
	return json.Marshal(s)
}

// UnmarshalJSON is generated so Degree satisfies json.Unmarshaler.
func (r *Degree) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return fmt.Errorf("Degree should be a string, got %s", data)
	}
	v, ok := _DegreeNameToValue[s]
	if !ok {
		return fmt.Errorf("invalid Degree %q", s)
	}
	*r = v
	return nil
}
